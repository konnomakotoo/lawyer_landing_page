version: "3.9"

services:
  traefik:
    image: traefik:v3.2.3
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certresolver=myresolver"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=akermengm@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - web
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    env_file:
      - ./.env
    # дублируем ключ, чтобы точно применился даже при пустом .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`bakaevpartners.ru`) && PathPrefix(`/`)"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.services.client.loadbalancer.server.port=80"
    networks:
      - web
    restart: unless-stopped

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`bakaevpartners.ru`) && PathPrefix(`/api`)"
      - "traefik.http.services.server.loadbalancer.server.port=3000"
    networks:
      - web
    depends_on:
      - db
    restart: unless-stopped


networks:
  web:
    driver: bridge

volumes:
  letsencrypt:
  dbdata: